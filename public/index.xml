<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Peng&#39;s blog</title>
    <link>https://pengliu0423.github.io/</link>
    <description>Recent content on Peng&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 08 Mar 2020 08:20:14 +0800</lastBuildDate>
    <atom:link href="https://pengliu0423.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://pengliu0423.github.io/about/</link>
      <pubDate>Tue, 22 Sep 2020 10:37:58 +0530</pubDate>
      <guid>https://pengliu0423.github.io/about/</guid>
      <description>关于我 17届毕业后，在滴滴和贝壳担任后端技术岗位。在这里，主要分享我的技术心得、投资经验以及对各类书籍的思考与理解。
联系我 如果有任何问题或者想法，欢迎通过以下方式联系我
Email : 862793169@qq.com </description>
    </item>
    <item>
      <title>探究Golang之编译原理</title>
      <link>https://pengliu0423.github.io/posts/%E6%8E%A2%E7%A9%B6golang%E4%B9%8B%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 08 Mar 2020 08:20:14 +0800</pubDate>
      <guid>https://pengliu0423.github.io/posts/%E6%8E%A2%E7%A9%B6golang%E4%B9%8B%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</guid>
      <description>go语言是一门编译型语言，也就说代码需要编译成目标机器码才能在目标机器上运行。以下面demo.go为例，看看go语言编译器背后做了些什么事情。ttttt
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;hello world&amp;#34;) } 词法分析 词法分析是编译的第一步,它的作用是解析源文件,将文件中的字符串序列转换成Token序列。通常会把执行词法分析的程序称为词法解析器（lexer）,也叫扫描器（scanner）。
go语言的扫描器源代码位于src/cmd/compile/internal/syntax的scanner结构体,Token定义位于src/cmd/compile/internal/syntax/tokens.go。
通过源代码可以看到,词法分析主要是scanner.next方法驱动,主体是一个的switch case表示的状态机。在这个阶段,可以检测到单词拼写和非法字符错误。例如：~、@等符号，0x5j(16进制表示错误)
下面是demo.go被扫描的结果：
位置 记号 token 注释 1:1 package _Package 关键字 1:9 main _Name 名称main 1:13 _Semi 分号 3:1 import _Import 关键字 3:8 &amp;ldquo;fmt&amp;rdquo; _Literal 字面量fmt 3:13 _Semi 分号 5:1 func _Func 关键字 5:6 main _Name 名称main 5:10 ( _Lparen 左括号 5:11 ) _Rparen 右括号 5:13 { _Lbrace 左大括号 6:2 fmt _Name 名称fmt 6:5 . _Dot 点号 6:6 Println _Name 名称Println 6:13 ( _Lparen 左括号 6:17 &amp;ldquo;hello world&amp;rdquo; _Literal 字面量hello world 6:27 ) _Rparen 右括号 6:28 _Semi 分号 7:1 } _Rbrace 右大括号 7:2 _Semi 分号 这个例子可以在src/cmd/compile/internal/syntax/scanner_test.</description>
    </item>
  </channel>
</rss>
